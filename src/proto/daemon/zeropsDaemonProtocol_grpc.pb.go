// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.3
// source: zeropsDaemonProtocol.proto

package daemon

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ZeropsDaemonProtocolClient is the client API for ZeropsDaemonProtocol service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZeropsDaemonProtocolClient interface {
	StartVpn(ctx context.Context, in *StartVpnRequest, opts ...grpc.CallOption) (*VpnStatus, error)
	StopVpn(ctx context.Context, in *StopVpnRequest, opts ...grpc.CallOption) (*VpnStatus, error)
	StatusVpn(ctx context.Context, in *StatusVpnRequest, opts ...grpc.CallOption) (*VpnStatus, error)
}

type zeropsDaemonProtocolClient struct {
	cc grpc.ClientConnInterface
}

func NewZeropsDaemonProtocolClient(cc grpc.ClientConnInterface) ZeropsDaemonProtocolClient {
	return &zeropsDaemonProtocolClient{cc}
}

func (c *zeropsDaemonProtocolClient) StartVpn(ctx context.Context, in *StartVpnRequest, opts ...grpc.CallOption) (*VpnStatus, error) {
	out := new(VpnStatus)
	err := c.cc.Invoke(ctx, "/zeropsDaemonProtocol.ZeropsDaemonProtocol/startVpn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zeropsDaemonProtocolClient) StopVpn(ctx context.Context, in *StopVpnRequest, opts ...grpc.CallOption) (*VpnStatus, error) {
	out := new(VpnStatus)
	err := c.cc.Invoke(ctx, "/zeropsDaemonProtocol.ZeropsDaemonProtocol/stopVpn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zeropsDaemonProtocolClient) StatusVpn(ctx context.Context, in *StatusVpnRequest, opts ...grpc.CallOption) (*VpnStatus, error) {
	out := new(VpnStatus)
	err := c.cc.Invoke(ctx, "/zeropsDaemonProtocol.ZeropsDaemonProtocol/statusVpn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZeropsDaemonProtocolServer is the server API for ZeropsDaemonProtocol service.
// All implementations must embed UnimplementedZeropsDaemonProtocolServer
// for forward compatibility
type ZeropsDaemonProtocolServer interface {
	StartVpn(context.Context, *StartVpnRequest) (*VpnStatus, error)
	StopVpn(context.Context, *StopVpnRequest) (*VpnStatus, error)
	StatusVpn(context.Context, *StatusVpnRequest) (*VpnStatus, error)
	mustEmbedUnimplementedZeropsDaemonProtocolServer()
}

// UnimplementedZeropsDaemonProtocolServer must be embedded to have forward compatible implementations.
type UnimplementedZeropsDaemonProtocolServer struct {
}

func (UnimplementedZeropsDaemonProtocolServer) StartVpn(context.Context, *StartVpnRequest) (*VpnStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartVpn not implemented")
}
func (UnimplementedZeropsDaemonProtocolServer) StopVpn(context.Context, *StopVpnRequest) (*VpnStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopVpn not implemented")
}
func (UnimplementedZeropsDaemonProtocolServer) StatusVpn(context.Context, *StatusVpnRequest) (*VpnStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatusVpn not implemented")
}
func (UnimplementedZeropsDaemonProtocolServer) mustEmbedUnimplementedZeropsDaemonProtocolServer() {}

// UnsafeZeropsDaemonProtocolServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZeropsDaemonProtocolServer will
// result in compilation errors.
type UnsafeZeropsDaemonProtocolServer interface {
	mustEmbedUnimplementedZeropsDaemonProtocolServer()
}

func RegisterZeropsDaemonProtocolServer(s grpc.ServiceRegistrar, srv ZeropsDaemonProtocolServer) {
	s.RegisterService(&ZeropsDaemonProtocol_ServiceDesc, srv)
}

func _ZeropsDaemonProtocol_StartVpn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartVpnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeropsDaemonProtocolServer).StartVpn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zeropsDaemonProtocol.ZeropsDaemonProtocol/startVpn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeropsDaemonProtocolServer).StartVpn(ctx, req.(*StartVpnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZeropsDaemonProtocol_StopVpn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopVpnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeropsDaemonProtocolServer).StopVpn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zeropsDaemonProtocol.ZeropsDaemonProtocol/stopVpn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeropsDaemonProtocolServer).StopVpn(ctx, req.(*StopVpnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZeropsDaemonProtocol_StatusVpn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusVpnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeropsDaemonProtocolServer).StatusVpn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zeropsDaemonProtocol.ZeropsDaemonProtocol/statusVpn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeropsDaemonProtocolServer).StatusVpn(ctx, req.(*StatusVpnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ZeropsDaemonProtocol_ServiceDesc is the grpc.ServiceDesc for ZeropsDaemonProtocol service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ZeropsDaemonProtocol_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zeropsDaemonProtocol.ZeropsDaemonProtocol",
	HandlerType: (*ZeropsDaemonProtocolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "startVpn",
			Handler:    _ZeropsDaemonProtocol_StartVpn_Handler,
		},
		{
			MethodName: "stopVpn",
			Handler:    _ZeropsDaemonProtocol_StopVpn_Handler,
		},
		{
			MethodName: "statusVpn",
			Handler:    _ZeropsDaemonProtocol_StatusVpn_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zeropsDaemonProtocol.proto",
}
